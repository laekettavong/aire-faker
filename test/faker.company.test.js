/* eslint-env mocha */
import { assert, expect } from 'chai'
import Company from '../lib/model/Company'

describe('Faker.Company', () => {
    let counter = 0

    it(`(${++counter}) Returns a string`, (done) => {
        assert.isString(Company.name())
        assert.isString(Company.industry())
        assert.isString(Company.description())
        assert.isString(Company.email())
        assert.isString(Company.phone())
        assert.isString(Company.title())
        assert.isString(Company.department())
        assert.isString(Company.duties())
        expect(Company.name()).to.be.a('string')
        expect(Company.industry()).to.be.a('string')
        expect(Company.description()).to.be.a('string')
        expect(Company.email()).to.be.a('string')
        expect(Company.phone()).to.be.a('string')
        expect(Company.title()).to.be.a('string')
        expect(Company.department()).to.be.a('string')
        expect(Company.duties()).to.be.a('string')
        done()
    })

    it(`(${++counter}) Returns a number`, (done) => {
        assert.isNumber(Company.founded())
        expect(Company.founded()).to.be.a('number')
        done()
    })

    it(`(${++counter}) Returns a literal object`, (done) => {
        assert.isObject(Company.address())
        assert.isObject(Company.duration())
        assert.isObject(Company.companyJSON())
        assert.isObject(Company.employeeJSON())
        expect(Company.address()).to.be.a('object')
        expect(Company.duration()).to.be.a('object')
        expect(Company.companyJSON()).to.be.a('object')
        expect(Company.employeeJSON()).to.be.a('object')
        done()
    })

    it(`(${++counter}) Contains valid values`, (done) => {
        assert.isAbove(Company.name().length, 0)
        assert.isAbove(Company.industry().length, 0)
        assert.isAbove(Company.description().length, 0)
        assert.isAbove(Company.phone().length, 0)
        assert.isAbove(Company.title().length, 0)
        assert.isAbove(Company.department().length, 0)
        assert.isAbove(Company.duties().length, 0)

        assert.isNotEmpty(Company.address())
        assert.isNotEmpty(Company.duration())
        assert.isNotEmpty(Company.companyJSON())
        assert.isNotEmpty(Company.employeeJSON())
        done()
    })

    it(`(${++counter}) Has properties`, (done) => {
        assert.property(Company.companyJSON(), 'name')
        assert.property(Company.companyJSON(), 'industry')
        assert.property(Company.companyJSON(), 'description')
        assert.property(Company.companyJSON(), 'started')
        assert.property(Company.companyJSON(), 'email')
        assert.property(Company.companyJSON(), 'phone')
        assert.property(Company.companyJSON(), 'address')
        assert.property(Company.employeeJSON(), 'name')
        assert.property(Company.employeeJSON(), 'description')
        assert.property(Company.employeeJSON(), 'department')
        assert.property(Company.employeeJSON(), 'title')
        assert.property(Company.employeeJSON(), 'duties')
        assert.property(Company.employeeJSON(), 'dates')
        assert.property(Company.duration(), 'startDate')
        assert.property(Company.duration(), 'endDate')
        assert.property(Company.address(), 'street')
        assert.property(Company.address(), 'city')
        assert.property(Company.address(), 'state')
        assert.property(Company.address(), 'zip')
        assert.property(Company.address(), 'locale')
        assert.hasAllKeys(Company.companyJSON(), ['name', 'industry', 'description', 'started', 'email', 'phone', 'address'])
        assert.hasAllKeys(Company.employeeJSON(), ['name', 'description', 'department', 'title', 'duties', 'dates'])
        assert.hasAllKeys(Company.duration(), ['startDate', 'endDate'])
        assert.hasAllKeys(Company.address(), ['street', 'city', 'state', 'zip', 'locale'])
        done()
    })

    it(`(${++counter}) Does not throw any errors`, (done) => {
        assert.doesNotThrow(() => Company.name(), Error)
        assert.doesNotThrow(() => Company.industry(), Error)
        assert.doesNotThrow(() => Company.description(), Error)
        assert.doesNotThrow(() => Company.founded(), Error)
        assert.doesNotThrow(() => Company.phone(), Error)
        assert.doesNotThrow(() => Company.address(), Error)
        assert.doesNotThrow(() => Company.department(), Error)
        assert.doesNotThrow(() => Company.duties(), Error)
        assert.doesNotThrow(() => Company.duration(), Error)
        assert.doesNotThrow(() => Company.companyJSON(), Error)
        assert.doesNotThrow(() => Company.employeeJSON(), Error)
        done()
    })
})